// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: integrator_config.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
	"github.com/sqlc-dev/pqtype"
)

const createIntegratorConfig = `-- name: CreateIntegratorConfig :one
insert into integrator_config (client_id, provider_id, name, sp_id, plaza_id_map, url, insecure_skip_verify,
                               integrator_name, extra, tax_rate, surcharge, surchange_type)
values ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12)
returning id, client_id, provider_id, name, integrator_name, sp_id, plaza_id_map, extra, url, tax_rate, surcharge, surchange_type, insecure_skip_verify, created_at, updated_at
`

type CreateIntegratorConfigParams struct {
	ClientID           sql.NullString
	ProviderID         sql.NullInt32
	Name               sql.NullString
	SpID               sql.NullString
	PlazaIDMap         pqtype.NullRawMessage
	Url                sql.NullString
	InsecureSkipVerify sql.NullBool
	IntegratorName     sql.NullString
	Extra              pqtype.NullRawMessage
	TaxRate            sql.NullString
	Surcharge          sql.NullString
	SurchangeType      NullSurchargeType
}

func (q *Queries) CreateIntegratorConfig(ctx context.Context, arg CreateIntegratorConfigParams) (IntegratorConfig, error) {
	row := q.queryRow(ctx, q.createIntegratorConfigStmt, createIntegratorConfig,
		arg.ClientID,
		arg.ProviderID,
		arg.Name,
		arg.SpID,
		arg.PlazaIDMap,
		arg.Url,
		arg.InsecureSkipVerify,
		arg.IntegratorName,
		arg.Extra,
		arg.TaxRate,
		arg.Surcharge,
		arg.SurchangeType,
	)
	var i IntegratorConfig
	err := row.Scan(
		&i.ID,
		&i.ClientID,
		&i.ProviderID,
		&i.Name,
		&i.IntegratorName,
		&i.SpID,
		&i.PlazaIDMap,
		&i.Extra,
		&i.Url,
		&i.TaxRate,
		&i.Surcharge,
		&i.SurchangeType,
		&i.InsecureSkipVerify,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteIntegratorConfig = `-- name: DeleteIntegratorConfig :execresult
delete
from integrator_config
where id = $1
`

func (q *Queries) DeleteIntegratorConfig(ctx context.Context, id uuid.UUID) (sql.Result, error) {
	return q.exec(ctx, q.deleteIntegratorConfigStmt, deleteIntegratorConfig, id)
}

const getIntegratorConfig = `-- name: GetIntegratorConfig :one
select id, client_id, provider_id, name, integrator_name, sp_id, plaza_id_map, extra, url, tax_rate, surcharge, surchange_type, insecure_skip_verify, created_at, updated_at
from integrator_config
where id = $1
`

func (q *Queries) GetIntegratorConfig(ctx context.Context, id uuid.UUID) (IntegratorConfig, error) {
	row := q.queryRow(ctx, q.getIntegratorConfigStmt, getIntegratorConfig, id)
	var i IntegratorConfig
	err := row.Scan(
		&i.ID,
		&i.ClientID,
		&i.ProviderID,
		&i.Name,
		&i.IntegratorName,
		&i.SpID,
		&i.PlazaIDMap,
		&i.Extra,
		&i.Url,
		&i.TaxRate,
		&i.Surcharge,
		&i.SurchangeType,
		&i.InsecureSkipVerify,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getIntegratorConfigByClient = `-- name: GetIntegratorConfigByClient :one
select id, client_id, provider_id, name, integrator_name, sp_id, plaza_id_map, extra, url, tax_rate, surcharge, surchange_type, insecure_skip_verify, created_at, updated_at
from integrator_config
where client_id = $1
`

func (q *Queries) GetIntegratorConfigByClient(ctx context.Context, clientID sql.NullString) (IntegratorConfig, error) {
	row := q.queryRow(ctx, q.getIntegratorConfigByClientStmt, getIntegratorConfigByClient, clientID)
	var i IntegratorConfig
	err := row.Scan(
		&i.ID,
		&i.ClientID,
		&i.ProviderID,
		&i.Name,
		&i.IntegratorName,
		&i.SpID,
		&i.PlazaIDMap,
		&i.Extra,
		&i.Url,
		&i.TaxRate,
		&i.Surcharge,
		&i.SurchangeType,
		&i.InsecureSkipVerify,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getIntegratorConfigByName = `-- name: GetIntegratorConfigByName :one
select id, client_id, provider_id, name, integrator_name, sp_id, plaza_id_map, extra, url, tax_rate, surcharge, surchange_type, insecure_skip_verify, created_at, updated_at
from integrator_config
where name = $1
`

func (q *Queries) GetIntegratorConfigByName(ctx context.Context, name sql.NullString) (IntegratorConfig, error) {
	row := q.queryRow(ctx, q.getIntegratorConfigByNameStmt, getIntegratorConfigByName, name)
	var i IntegratorConfig
	err := row.Scan(
		&i.ID,
		&i.ClientID,
		&i.ProviderID,
		&i.Name,
		&i.IntegratorName,
		&i.SpID,
		&i.PlazaIDMap,
		&i.Extra,
		&i.Url,
		&i.TaxRate,
		&i.Surcharge,
		&i.SurchangeType,
		&i.InsecureSkipVerify,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getIntegratorConfigs = `-- name: GetIntegratorConfigs :many
select id, client_id, provider_id, name, integrator_name, sp_id, plaza_id_map, extra, url, tax_rate, surcharge, surchange_type, insecure_skip_verify, created_at, updated_at
from integrator_config
`

func (q *Queries) GetIntegratorConfigs(ctx context.Context) ([]IntegratorConfig, error) {
	rows, err := q.query(ctx, q.getIntegratorConfigsStmt, getIntegratorConfigs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []IntegratorConfig{}
	for rows.Next() {
		var i IntegratorConfig
		if err := rows.Scan(
			&i.ID,
			&i.ClientID,
			&i.ProviderID,
			&i.Name,
			&i.IntegratorName,
			&i.SpID,
			&i.PlazaIDMap,
			&i.Extra,
			&i.Url,
			&i.TaxRate,
			&i.Surcharge,
			&i.SurchangeType,
			&i.InsecureSkipVerify,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateIntegratorConfig = `-- name: UpdateIntegratorConfig :one
update integrator_config
set provider_id          = coalesce($2, provider_id),
    client_id            = coalesce($3, client_id),
    name                 = coalesce($4, name),
    sp_id                = coalesce($5, sp_id),
    plaza_id_map         = coalesce($6, plaza_id_map),
    url                  = coalesce($7, url),
    insecure_skip_verify = coalesce($8, insecure_skip_verify),
    integrator_name      = coalesce($9, integrator_name),
    extra                = coalesce($10, extra),
    tax_rate             = coalesce($11, tax_rate),
    surcharge            = coalesce($12, surcharge),
    surchange_type       = coalesce($13, surchange_type)
where id = $1
returning id, client_id, provider_id, name, integrator_name, sp_id, plaza_id_map, extra, url, tax_rate, surcharge, surchange_type, insecure_skip_verify, created_at, updated_at
`

type UpdateIntegratorConfigParams struct {
	ID                 uuid.UUID
	ProviderID         sql.NullInt32
	ClientID           sql.NullString
	Name               sql.NullString
	SpID               sql.NullString
	PlazaIDMap         pqtype.NullRawMessage
	Url                sql.NullString
	InsecureSkipVerify sql.NullBool
	IntegratorName     sql.NullString
	Extra              pqtype.NullRawMessage
	TaxRate            sql.NullString
	Surcharge          sql.NullString
	SurchangeType      NullSurchargeType
}

func (q *Queries) UpdateIntegratorConfig(ctx context.Context, arg UpdateIntegratorConfigParams) (IntegratorConfig, error) {
	row := q.queryRow(ctx, q.updateIntegratorConfigStmt, updateIntegratorConfig,
		arg.ID,
		arg.ProviderID,
		arg.ClientID,
		arg.Name,
		arg.SpID,
		arg.PlazaIDMap,
		arg.Url,
		arg.InsecureSkipVerify,
		arg.IntegratorName,
		arg.Extra,
		arg.TaxRate,
		arg.Surcharge,
		arg.SurchangeType,
	)
	var i IntegratorConfig
	err := row.Scan(
		&i.ID,
		&i.ClientID,
		&i.ProviderID,
		&i.Name,
		&i.IntegratorName,
		&i.SpID,
		&i.PlazaIDMap,
		&i.Extra,
		&i.Url,
		&i.TaxRate,
		&i.Surcharge,
		&i.SurchangeType,
		&i.InsecureSkipVerify,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
