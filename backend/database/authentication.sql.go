// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: authentication.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const createUser = `-- name: CreateUser :one
insert into users (name, username, password, permissions)
values ($1, $2, $3, $4)
returning id, name, username, password, permissions
`

type CreateUserParams struct {
	Name        sql.NullString
	Username    sql.NullString
	Password    sql.NullString
	Permissions []string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.queryRow(ctx, q.createUserStmt, createUser,
		arg.Name,
		arg.Username,
		arg.Password,
		pq.Array(arg.Permissions),
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Username,
		&i.Password,
		pq.Array(&i.Permissions),
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :execresult
delete
from users
where id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id uuid.UUID) (sql.Result, error) {
	return q.exec(ctx, q.deleteUserStmt, deleteUser, id)
}

const getUser = `-- name: GetUser :one
select id, name, username, password, permissions
from users
where username = $1
`

func (q *Queries) GetUser(ctx context.Context, username sql.NullString) (User, error) {
	row := q.queryRow(ctx, q.getUserStmt, getUser, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Username,
		&i.Password,
		pq.Array(&i.Permissions),
	)
	return i, err
}

const getUsers = `-- name: GetUsers :many
select id, name, username, password, permissions
from users
`

func (q *Queries) GetUsers(ctx context.Context) ([]User, error) {
	rows, err := q.query(ctx, q.getUsersStmt, getUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Username,
			&i.Password,
			pq.Array(&i.Permissions),
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
