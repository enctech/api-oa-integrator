// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: transactions.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/sqlc-dev/pqtype"
)

const createOATransaction = `-- name: CreateOATransaction :one
insert into oa_transactions (businesstransactionid, lpn, customerid, jobid, facility, device, extra, entry_lane,
                             exit_lane)
values ($1, $2, $3, $4, $5, $6, $7, $8, $9)
returning id, businesstransactionid, lpn, customerid, jobid, facility, device, extra, entry_lane, exit_lane, created_at, updated_at
`

type CreateOATransactionParams struct {
	Businesstransactionid string
	Lpn                   sql.NullString
	Customerid            sql.NullString
	Jobid                 sql.NullString
	Facility              sql.NullString
	Device                sql.NullString
	Extra                 pqtype.NullRawMessage
	EntryLane             sql.NullString
	ExitLane              sql.NullString
}

func (q *Queries) CreateOATransaction(ctx context.Context, arg CreateOATransactionParams) (OaTransaction, error) {
	row := q.queryRow(ctx, q.createOATransactionStmt, createOATransaction,
		arg.Businesstransactionid,
		arg.Lpn,
		arg.Customerid,
		arg.Jobid,
		arg.Facility,
		arg.Device,
		arg.Extra,
		arg.EntryLane,
		arg.ExitLane,
	)
	var i OaTransaction
	err := row.Scan(
		&i.ID,
		&i.Businesstransactionid,
		&i.Lpn,
		&i.Customerid,
		&i.Jobid,
		&i.Facility,
		&i.Device,
		&i.Extra,
		&i.EntryLane,
		&i.ExitLane,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getOATransaction = `-- name: GetOATransaction :one
select id, businesstransactionid, lpn, customerid, jobid, facility, device, extra, entry_lane, exit_lane, created_at, updated_at
from oa_transactions
where businesstransactionid = $1
`

func (q *Queries) GetOATransaction(ctx context.Context, businesstransactionid string) (OaTransaction, error) {
	row := q.queryRow(ctx, q.getOATransactionStmt, getOATransaction, businesstransactionid)
	var i OaTransaction
	err := row.Scan(
		&i.ID,
		&i.Businesstransactionid,
		&i.Lpn,
		&i.Customerid,
		&i.Jobid,
		&i.Facility,
		&i.Device,
		&i.Extra,
		&i.EntryLane,
		&i.ExitLane,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getOATransactions = `-- name: GetOATransactions :many
select id, businesstransactionid, lpn, customerid, jobid, facility, device, extra, entry_lane, exit_lane, created_at, updated_at
from oa_transactions
where lpn like concat('%', $1::text, '%')
  and jobid::text like concat('%', $2::text, '%')
  and facility::text like concat('%', $3::text, '%')
  and entry_lane::text like concat('%', $4::text, '%')
  and (exit_lane::text LIKE concat('%', $5::text, '%') or (exit_lane is null and ($5::text) = ''))
  and created_at >= $6
  and created_at <= $7
`

type GetOATransactionsParams struct {
	Lpn       string
	Jobid     string
	Facility  string
	EntryLane string
	ExitLane  string
	StartAt   time.Time
	EndAt     time.Time
}

func (q *Queries) GetOATransactions(ctx context.Context, arg GetOATransactionsParams) ([]OaTransaction, error) {
	rows, err := q.query(ctx, q.getOATransactionsStmt, getOATransactions,
		arg.Lpn,
		arg.Jobid,
		arg.Facility,
		arg.EntryLane,
		arg.ExitLane,
		arg.StartAt,
		arg.EndAt,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []OaTransaction
	for rows.Next() {
		var i OaTransaction
		if err := rows.Scan(
			&i.ID,
			&i.Businesstransactionid,
			&i.Lpn,
			&i.Customerid,
			&i.Jobid,
			&i.Facility,
			&i.Device,
			&i.Extra,
			&i.EntryLane,
			&i.ExitLane,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOATransactionsCount = `-- name: GetOATransactionsCount :one
select count(*)
from oa_transactions
where lpn like concat('%', $1::text, '%')
  and jobid::text like concat('%', $2::text, '%')
  and facility::text like concat('%', $3::text, '%')
  and entry_lane::text like concat('%', $4::text, '%')
  and (exit_lane::text LIKE concat('%', $5::text, '%') or (exit_lane is null and ($5::text) = ''))
  and created_at >= $6
  and created_at <= $7
`

type GetOATransactionsCountParams struct {
	Lpn       string
	Jobid     string
	Facility  string
	EntryLane string
	ExitLane  string
	StartAt   time.Time
	EndAt     time.Time
}

func (q *Queries) GetOATransactionsCount(ctx context.Context, arg GetOATransactionsCountParams) (int64, error) {
	row := q.queryRow(ctx, q.getOATransactionsCountStmt, getOATransactionsCount,
		arg.Lpn,
		arg.Jobid,
		arg.Facility,
		arg.EntryLane,
		arg.ExitLane,
		arg.StartAt,
		arg.EndAt,
	)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const updateOATransaction = `-- name: UpdateOATransaction :one
update oa_transactions
set lpn        = coalesce($2, lpn),
    customerid = coalesce($3, customerid),
    jobid      = coalesce($4, jobid),
    facility   = coalesce($5, facility),
    device     = coalesce($6, device),
    extra      = coalesce($7, extra),
    exit_lane  = coalesce($8, exit_lane)
where businesstransactionid = $1
returning id, businesstransactionid, lpn, customerid, jobid, facility, device, extra, entry_lane, exit_lane, created_at, updated_at
`

type UpdateOATransactionParams struct {
	Businesstransactionid string
	Lpn                   sql.NullString
	Customerid            sql.NullString
	Jobid                 sql.NullString
	Facility              sql.NullString
	Device                sql.NullString
	Extra                 pqtype.NullRawMessage
	ExitLane              sql.NullString
}

func (q *Queries) UpdateOATransaction(ctx context.Context, arg UpdateOATransactionParams) (OaTransaction, error) {
	row := q.queryRow(ctx, q.updateOATransactionStmt, updateOATransaction,
		arg.Businesstransactionid,
		arg.Lpn,
		arg.Customerid,
		arg.Jobid,
		arg.Facility,
		arg.Device,
		arg.Extra,
		arg.ExitLane,
	)
	var i OaTransaction
	err := row.Scan(
		&i.ID,
		&i.Businesstransactionid,
		&i.Lpn,
		&i.Customerid,
		&i.Jobid,
		&i.Facility,
		&i.Device,
		&i.Extra,
		&i.EntryLane,
		&i.ExitLane,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
