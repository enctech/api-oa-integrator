// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: authentication.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
insert into users (username, password, permission)
values ($1, $2, $3)
returning id, username, password, permission
`

type CreateUserParams struct {
	Username   sql.NullString
	Password   sql.NullString
	Permission sql.NullString
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.queryRow(ctx, q.createUserStmt, createUser, arg.Username, arg.Password, arg.Permission)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Permission,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :execresult
delete
from users
where id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id uuid.UUID) (sql.Result, error) {
	return q.exec(ctx, q.deleteUserStmt, deleteUser, id)
}

const getUser = `-- name: GetUser :one
select id, username, password, permission
from users
where username = $1
`

func (q *Queries) GetUser(ctx context.Context, username sql.NullString) (User, error) {
	row := q.queryRow(ctx, q.getUserStmt, getUser, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Permission,
	)
	return i, err
}
