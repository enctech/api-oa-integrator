// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: snb_config.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const createSnbConfig = `-- name: CreateSnbConfig :one
insert into snb_config (endpoint, facility, device, name, username, password)
values ($1, $2, $3, $4, $5, $6)
returning id, name, username, password, endpoint, facility, device
`

type CreateSnbConfigParams struct {
	Endpoint sql.NullString
	Facility []string
	Device   []string
	Name     sql.NullString
	Username sql.NullString
	Password sql.NullString
}

func (q *Queries) CreateSnbConfig(ctx context.Context, arg CreateSnbConfigParams) (SnbConfig, error) {
	row := q.queryRow(ctx, q.createSnbConfigStmt, createSnbConfig,
		arg.Endpoint,
		pq.Array(arg.Facility),
		pq.Array(arg.Device),
		arg.Name,
		arg.Username,
		arg.Password,
	)
	var i SnbConfig
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Username,
		&i.Password,
		&i.Endpoint,
		pq.Array(&i.Facility),
		pq.Array(&i.Device),
	)
	return i, err
}

const deleteSnbConfig = `-- name: DeleteSnbConfig :execresult
delete
from snb_config
where id = $1
`

func (q *Queries) DeleteSnbConfig(ctx context.Context, id uuid.UUID) (sql.Result, error) {
	return q.exec(ctx, q.deleteSnbConfigStmt, deleteSnbConfig, id)
}

const getAllSnbConfig = `-- name: GetAllSnbConfig :many
select id, name, username, password, endpoint, facility, device
from snb_config
`

func (q *Queries) GetAllSnbConfig(ctx context.Context) ([]SnbConfig, error) {
	rows, err := q.query(ctx, q.getAllSnbConfigStmt, getAllSnbConfig)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SnbConfig{}
	for rows.Next() {
		var i SnbConfig
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Username,
			&i.Password,
			&i.Endpoint,
			pq.Array(&i.Facility),
			pq.Array(&i.Device),
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSnbConfig = `-- name: GetSnbConfig :one
select id, name, username, password, endpoint, facility, device
from snb_config
where id = $1
`

func (q *Queries) GetSnbConfig(ctx context.Context, id uuid.UUID) (SnbConfig, error) {
	row := q.queryRow(ctx, q.getSnbConfigStmt, getSnbConfig, id)
	var i SnbConfig
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Username,
		&i.Password,
		&i.Endpoint,
		pq.Array(&i.Facility),
		pq.Array(&i.Device),
	)
	return i, err
}

const getSnbConfigByFacilityAndDevice = `-- name: GetSnbConfigByFacilityAndDevice :one
select id, name, username, password, endpoint, facility, device
from snb_config
where $1::text = any (facility)
  and $2::text = any (device)
`

type GetSnbConfigByFacilityAndDeviceParams struct {
	Facility string
	Device   string
}

func (q *Queries) GetSnbConfigByFacilityAndDevice(ctx context.Context, arg GetSnbConfigByFacilityAndDeviceParams) (SnbConfig, error) {
	row := q.queryRow(ctx, q.getSnbConfigByFacilityAndDeviceStmt, getSnbConfigByFacilityAndDevice, arg.Facility, arg.Device)
	var i SnbConfig
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Username,
		&i.Password,
		&i.Endpoint,
		pq.Array(&i.Facility),
		pq.Array(&i.Device),
	)
	return i, err
}

const updateSnbConfig = `-- name: UpdateSnbConfig :one
update snb_config
set endpoint = coalesce($2, endpoint),
    facility = coalesce($3, facility),
    device   = coalesce($4, device),
    name     = coalesce($5, name),
    username = coalesce($6, username),
    password = coalesce($7, password)
where id = $1
returning id, name, username, password, endpoint, facility, device
`

type UpdateSnbConfigParams struct {
	ID       uuid.UUID
	Endpoint sql.NullString
	Facility []string
	Device   []string
	Name     sql.NullString
	Username sql.NullString
	Password sql.NullString
}

func (q *Queries) UpdateSnbConfig(ctx context.Context, arg UpdateSnbConfigParams) (SnbConfig, error) {
	row := q.queryRow(ctx, q.updateSnbConfigStmt, updateSnbConfig,
		arg.ID,
		arg.Endpoint,
		pq.Array(arg.Facility),
		pq.Array(arg.Device),
		arg.Name,
		arg.Username,
		arg.Password,
	)
	var i SnbConfig
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Username,
		&i.Password,
		&i.Endpoint,
		pq.Array(&i.Facility),
		pq.Array(&i.Device),
	)
	return i, err
}
