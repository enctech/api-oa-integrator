// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: logs.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/sqlc-dev/pqtype"
)

const countLogs = `-- name: CountLogs :one
select count(*)
from logs
where created_at >= $1
  and created_at <= $2
`

type CountLogsParams struct {
	After  time.Time
	Before time.Time
}

func (q *Queries) CountLogs(ctx context.Context, arg CountLogsParams) (int64, error) {
	row := q.queryRow(ctx, q.countLogsStmt, countLogs, arg.After, arg.Before)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createLog = `-- name: CreateLog :one
insert into logs (level, message, fields, created_at)
values ($1, $2, $3, $4)
returning id, level, message, fields, created_at
`

type CreateLogParams struct {
	Level     sql.NullString
	Message   sql.NullString
	Fields    pqtype.NullRawMessage
	CreatedAt time.Time
}

func (q *Queries) CreateLog(ctx context.Context, arg CreateLogParams) (Log, error) {
	row := q.queryRow(ctx, q.createLogStmt, createLog,
		arg.Level,
		arg.Message,
		arg.Fields,
		arg.CreatedAt,
	)
	var i Log
	err := row.Scan(
		&i.ID,
		&i.Level,
		&i.Message,
		&i.Fields,
		&i.CreatedAt,
	)
	return i, err
}

const getLogs = `-- name: GetLogs :many
select id, level, message, fields, created_at
from logs
where message like $3::text
  and fields::text like $4::text
  and created_at >= $5
  and created_at <= $6
order by created_at desc
limit $1 offset $2
`

type GetLogsParams struct {
	Limit   int32
	Offset  int32
	Message string
	Fields  string
	After   time.Time
	Before  time.Time
}

func (q *Queries) GetLogs(ctx context.Context, arg GetLogsParams) ([]Log, error) {
	rows, err := q.query(ctx, q.getLogsStmt, getLogs,
		arg.Limit,
		arg.Offset,
		arg.Message,
		arg.Fields,
		arg.After,
		arg.Before,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Log
	for rows.Next() {
		var i Log
		if err := rows.Scan(
			&i.ID,
			&i.Level,
			&i.Message,
			&i.Fields,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
